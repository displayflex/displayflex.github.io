{"version":3,"sources":["constants/services.js","constants/endpoints.js","utils/services.js","constants/paths.js","actions/services.js","components/blocks/global/Loader/styles.js","components/blocks/global/Loader/index.js","serviceWorker.js","Router.jsx","sagas/input.js","sagas/location.js","actions/storage.js","sagas/weather.js","sagas/storage.js","sagas/index.js","reducer/services.js","reducer/location.js","reducer/index.js","store.js","theme/GlobalStyle.js","theme/index.js","components/wrappers/ThemeProvider.jsx","App.jsx","index.js","constants/actions.js","constants/index.js","actions/location.js"],"names":["WEATHERSTACK","OPEN_WEATHER","YANDEX","LOCATIONIQ","URL_YANDEX_API","URL_OPENWEATHER","URL_OPENWEATHER_API","URL_WEATHERSTACK_API","URL_LOCATIONIQ_API","getServiceUrl","service","apikey","latitude","longitude","cityName","args","length","process","join","mapOpenWeatherDataToImageUrl","data","iconId","weather","icon","iconList","mapWeatherStackDataToImageUrl","currentWeather","current","weather_descriptions","weatherList","Sunny","Clear","Clouds","Overcast","Moderate","Rain","Mist","commonWeatherList","sun","cloud","rain","thunder","snow","weatherName","Object","keys","find","it","indexOf","weather_icons","mapServiceData","cod","name","coord","lat","lon","success","location","coutry","isRecievedDataInvalid","temperature","weatherImageSrc","main","temp","toFixed","SETUP_PAGE_PATH","WEATHER_PAGE_PATH","ERROR_PAGE_PATH","changeService","payload","type","CHANGE_SERVICE","styled","div","props","theme","unit","eight","colors","primary","Loader","Boolean","window","hostname","match","SetupPage","React","lazy","WeatherPage","ErrorPage","Suspense","fallback","exact","path","component","handleInputChangeSaga","watchChangeCityInput","action","put","setCityInputValue","throttle","CHANGE_CITY_INPUT","fetchCoordsSaga","fetchDataFromCoordsSaga","setLocationParamsSaga","watchSetLocationParams","fetchCoordsApi","Promise","resolve","reject","ymaps","ready","geolocation","get","provider","autoReverseGeocode","then","result","error","fetchDataFromCoordsApi","fetchServiceData","call","response","Error","geoObjects","position","fetchCoordsSuccess","fetchCoordsError","fetchDataSuccess","fetchDataError","select","state","coords","fetchDataFromCoords","address","city","setLocationData","takeEvery","SET_LOCATION_PARAMS","setDataToStorage","SET_DATA_TO_STORAGE","fetchCoordsFromCityNameSaga","setWeatherDataSaga","watchSetWeatherData","fetchCoordsFromCityNameApi","services","setWeatherDataSuccess","setWeatherDataError","getHistory","push","SET_WEATHER_DATA","setDataToStorageSaga","showStoragedResultSaga","watchSetDataToStorage","watchShowStoragedResult","clientDate","Date","now","clientData","localforage","setItem","setDataFromStorage","SHOW_STORAGED_RESULT","a","url","fetch","json","catch","all","initialState","allServices","filter","id","cityInputValue","isErrorInLoad","SET_LOCATION_DATA","SET_WEATHER_DATA_SUCCESS","SET_WEATHER_DATA_ERROR","SET_CITY_INPUT_VALUE","FETCH_COORDS_SUCCESS","FETCH_COORDS_ERROR","FETCH_DATA_SUCCESS","FETCH_DATA_ERROR","SET_DATA_FROM_STORAGE","combineReducers","store","sagaMiddleware","createSagaMiddleware","getStore","createStore","reducer","applyMiddleware","run","rootSaga","createGlobalStyle","background","font","fontWeights","normal","fontFamily","double","quadriple","width","tablet","half","single","backgroundDark","primaryLight","secondary","secondaryLight","fontPrimary","fontSecondary","fontSizes","werySmall","small","big","veryBig","letterSpacing","caps","light","bold","mobile","desktop","desktopLarge","mobileOnly","ThemeProviderWrapper","children","GlobalStyle","App","ThemeProvider","Router","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister","FETCH_DATA_FROM_COORDS","setWeatherData","changeCityInput","setLocationParams","showStoragedResult"],"mappings":"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","file":"static/js/main.b53ebbc6.chunk.js","sourcesContent":["export const WEATHERSTACK = 'WEATHERSTACK'\nexport const OPEN_WEATHER = 'OPEN_WEATHER'\nexport const YANDEX = 'YANDEX'\nexport const LOCATIONIQ = 'LOCATIONIQ'\n","// Place here Endpoints constants (external resources)\n\n// export const DEMO_ENDPOINT = 'https://example.com'\nexport const URL_YANDEX_API = 'https://api-maps.yandex.ru'\nexport const URL_OPENWEATHER = 'https://openweathermap.org'\nexport const URL_OPENWEATHER_API = 'https://api.openweathermap.org'\nexport const URL_WEATHERSTACK_API = 'http://api.weatherstack.com'\nexport const URL_LOCATIONIQ_API = 'https://eu1.locationiq.com'\n","import {\n  URL_YANDEX_API,\n  URL_OPENWEATHER,\n  URL_OPENWEATHER_API,\n  URL_WEATHERSTACK_API,\n  URL_LOCATIONIQ_API,\n} from '@/constants/endpoints'\nimport { YANDEX, OPEN_WEATHER, WEATHERSTACK, LOCATIONIQ } from '@/constants/services'\n\nexport const getServiceUrl = (service, ...args) => {\n  let apikey\n  let latitude\n  let longitude\n  let cityName\n\n  if (args.length === 2) {\n    [latitude, longitude] = args\n  } else if (args.length === 1) {\n    [cityName] = args\n  }\n\n  switch (service) {\n    case WEATHERSTACK:\n      apikey = process.env.REACT_APP_API_KEY_WEATHERSTACK\n\n      return [\n        `${URL_WEATHERSTACK_API}/current`,\n        `?access_key=${apikey}`,\n        `&query=${latitude},${longitude}`,\n      ].join('')\n\n    case OPEN_WEATHER:\n      apikey = process.env.REACT_APP_API_KEY_OPENWEATHER\n\n      return [\n        `${URL_OPENWEATHER_API}/data/2.5/weather`,\n        `?lat=${latitude}`,\n        `&lon=${longitude}`,\n        '&units=metric',\n        `&appid=${apikey}`,\n      ].join('')\n\n    case YANDEX:\n      apikey = process.env.REACT_APP_API_KEY_YANDEX\n\n      return `${URL_YANDEX_API}/2.1/?lang=en_RU&amp;apikey=${apikey}`\n\n    case LOCATIONIQ:\n      apikey = process.env.REACT_APP_API_KEY_LOCATIONIQ\n\n      if (cityName) {\n        return [\n          `${URL_LOCATIONIQ_API}/v1/search.php`,\n          `?key=${apikey}`,\n          `&city=${cityName}`,\n          '&format=json',\n          '&accept-language=en',\n        ].join('')\n      }\n\n      return [\n        `${URL_LOCATIONIQ_API}/v1/reverse.php`,\n        `?key=${apikey}`,\n        `&lat=${latitude}`,\n        `&lon=${longitude}`,\n        '&format=json',\n        '&accept-language=en',\n      ].join('')\n\n    default:\n      return null\n  }\n}\n\nconst mapOpenWeatherDataToImageUrl = data => {\n  const iconId = data.weather[0].icon\n  const iconList = {\n    '01d': 'day',\n    '01n': 'night',\n    '02d': 'cloudy-day-1',\n    '02n': 'cloudy-night-1',\n    '03d': 'cloudy',\n    '03n': 'cloudy',\n    '04d': 'cloudy',\n    '04n': 'cloudy',\n    '09d': 'rainy-7',\n    '09n': 'rainy-7',\n    '10d': 'rainy-5',\n    '10n': 'rainy-5',\n    '11d': 'thunder',\n    '11n': 'thunder',\n    '13d': 'snowy-5',\n    '13n': 'snowy-5',\n  }\n\n  if (iconId in iconList) {\n    return `/icons/${iconList[iconId]}.svg`\n  }\n\n  return `${URL_OPENWEATHER}/img/wn/${iconId}@2x.png`\n}\n\nconst mapWeatherStackDataToImageUrl = data => {\n  const [currentWeather] = data.current.weather_descriptions\n  const weatherList = {\n    Sunny: 'day',\n    Clear: 'night',\n    Clouds: 'cloudy',\n    Overcast: 'cloudy',\n    Moderate: 'rainy-7',\n    Rain: 'rainy-5',\n    Mist: 'rainy-4',\n    'Rain Shower': 'rainy-7',\n    'Partly cloudy': 'cloudy-day-1',\n    'Light Rain Shower': 'rainy-4',\n    'Light Rain': 'rainy-4',\n    'Light Rain Shower, Rain Shower': 'rainy-4',\n    'Moderate or heavy rain shower': 'rainy-7',\n    'Heavy rain shower': 'rainy-7',\n    'Light Rain With Thunderstorm': 'thunder',\n    'Light Drizzle, Mist': 'rainy-4',\n    'Light Drizzle': 'rainy-4',\n  }\n\n  const commonWeatherList = {\n    sun: 'day',\n    cloud: 'cloudy',\n    rain: 'rainy-5',\n    thunder: 'thunder',\n    snow: 'snowy-5',\n  }\n\n  if (currentWeather in weatherList) {\n    return `/icons/${weatherList[currentWeather]}.svg`\n  }\n\n  const weatherName = Object.keys(commonWeatherList).find(it => currentWeather.indexOf(it) !== -1)\n\n  if (weatherName) {\n    return `/icons/${commonWeatherList[weatherName]}.svg`\n  }\n\n  return data.current.weather_icons[0]\n}\n\nconst isRecievedDataInvalid = (service, data) => {\n  switch (service) {\n    case OPEN_WEATHER:\n      if ('cod' in data && data.cod === '400') {\n        return true\n      } else if ('name' in data && data.name === 'Earth') {\n        return true\n      } else if (\n        'coord' in data &&\n        'lat' in data.coord &&\n        'lon' in data.coord &&\n        data.coord.lat === 0 &&\n        data.coord.lon === 0\n      ) {\n        return true\n      }\n\n      return false\n\n    case WEATHERSTACK:\n      if ('success' in data && !data.success) {\n        return true\n      } else if (\n        'location' in data &&\n        'country' in data.location &&\n        'lat' in data.location &&\n        'lon' in data.location &&\n        !data.location.coutry &&\n        !data.location.lat &&\n        !data.location.lon\n      ) {\n        return true\n      }\n\n      return false\n\n    default:\n      return false\n  }\n}\n\nexport const mapServiceData = (service, data) => {\n  if (isRecievedDataInvalid(service, data)) {\n    return {\n      temperature: null,\n      weather: '',\n      weatherImageSrc: '',\n    }\n  }\n\n  switch (service) {\n    case OPEN_WEATHER:\n      return {\n        temperature: data.main.temp.toFixed(1),\n        weather: data.weather[0].main,\n        weatherImageSrc: mapOpenWeatherDataToImageUrl(data),\n      }\n\n    case WEATHERSTACK:\n      return {\n        temperature: data.current.temperature.toFixed(1),\n        weather: data.current.weather_descriptions[0],\n        weatherImageSrc: mapWeatherStackDataToImageUrl(data),\n      }\n\n    default:\n      break\n  }\n}\n","// Place here Paths constants (router paths)\n\nexport const SETUP_PAGE_PATH = '/'\nexport const WEATHER_PAGE_PATH = '/weather'\nexport const ERROR_PAGE_PATH = '/404'\n","import { CHANGE_SERVICE } from '@/constants/actions'\n\nexport const changeService = payload => ({\n  payload,\n  type: CHANGE_SERVICE,\n})\n","import styled from 'styled-components'\n\nexport default styled.div`\n  display: inline-block;\n  width: ${props => props.theme.unit.eight};\n  height: ${props => props.theme.unit.eight};\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n\n  &:after {\n    content: \" \";\n    display: block;\n    width: 46px;\n    height: 46px;\n    margin: 1px;\n    border-radius: 50%;\n    border: 5px solid ${props => props.theme.colors.primary};\n    border-color:\n      ${props => props.theme.colors.primary} transparent\n      ${props => props.theme.colors.primary} transparent;\n    animation: lds-dual-ring 1.2s linear infinite;\n  }\n\n  @keyframes lds-dual-ring {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`\n","import Loader from './styles'\n\nexport default Loader\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register (config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { ReactRouterGlobalHistory } from 'react-router-global-history'\n\nimport Loader from '@/components/blocks/global/Loader'\n\nimport { SETUP_PAGE_PATH, WEATHER_PAGE_PATH, ERROR_PAGE_PATH } from '@/constants'\n\nconst SetupPage = React.lazy(() => import('@/components/pages/Setup'))\nconst WeatherPage = React.lazy(() => import('@/components/pages/Weather'))\nconst ErrorPage = React.lazy(() => import('@/components/pages/Error'))\n\nexport default () => (\n  <Router>\n    <ReactRouterGlobalHistory />\n    <React.Suspense fallback={<Loader />}>\n      <Switch>\n        <Route exact path={SETUP_PAGE_PATH} component={SetupPage} />\n        <Route exact path={WEATHER_PAGE_PATH} component={WeatherPage} />\n        <Route exact path={ERROR_PAGE_PATH} component={ErrorPage} />\n        <Route component={ErrorPage} />\n      </Switch>\n    </React.Suspense>\n  </Router>\n)\n","import { put, throttle } from 'redux-saga/effects'\n\nimport { setCityInputValue } from '@/actions/location'\nimport { CHANGE_CITY_INPUT } from '@/constants'\n\nfunction * handleInputChangeSaga (action) {\n  yield put(setCityInputValue(action.payload))\n}\n\nfunction * watchChangeCityInput () {\n  yield throttle(500, CHANGE_CITY_INPUT, handleInputChangeSaga)\n}\n\nexport default watchChangeCityInput\n","import { call, put, select, takeEvery } from 'redux-saga/effects'\n\nimport {\n  fetchCoordsError,\n  fetchCoordsSuccess,\n  fetchDataError,\n  fetchDataFromCoords,\n  fetchDataSuccess,\n  setLocationData,\n} from '@/actions/location'\nimport { LOCATIONIQ, SET_LOCATION_PARAMS } from '@/constants'\nimport { fetchServiceData } from '.'\n\nconst fetchCoordsApi = () => {\n  return new Promise((resolve, reject) => {\n    window.ymaps.ready(() => {\n      window.ymaps.geolocation\n        .get({\n          provider: 'auto',\n          autoReverseGeocode: false,\n        })\n        .then(\n          result => {\n            resolve(result)\n          },\n          error => reject(error)\n        )\n    })\n  })\n}\n\nconst fetchDataFromCoordsApi = (latitude, longitude) => {\n  return fetchServiceData(LOCATIONIQ, latitude, longitude)\n}\n\nfunction * fetchCoordsSaga () {\n  try {\n    const response = yield call(fetchCoordsApi)\n\n    if (!response || !('geoObjects' in response)) {\n      throw new Error('Geolocation data not recieved')\n    }\n\n    const [latitude, longitude] = response.geoObjects.position\n    yield put(fetchCoordsSuccess({ latitude, longitude }))\n  } catch (error) {\n    yield put(fetchCoordsError())\n  }\n}\n\nfunction * fetchDataFromCoordsSaga (action) {\n  try {\n    const response = yield call(\n      fetchDataFromCoordsApi,\n      action.payload.latitude,\n      action.payload.longitude\n    )\n    yield put(fetchDataSuccess(response))\n  } catch (error) {\n    yield put(fetchDataError())\n  }\n}\n\nfunction * setLocationParamsSaga () {\n  yield * fetchCoordsSaga()\n  const { latitude, longitude } = yield select(state => state.location.coords)\n  yield * fetchDataFromCoordsSaga(fetchDataFromCoords({ latitude, longitude }))\n  const cityName = yield select(state => state.location.data.address.city)\n  yield put(setLocationData({ latitude, longitude, cityName }))\n}\n\nfunction * watchSetLocationParams () {\n  yield takeEvery(SET_LOCATION_PARAMS, setLocationParamsSaga)\n}\n\nexport default watchSetLocationParams\n","import { SET_DATA_TO_STORAGE } from '@/constants/actions'\n\nexport const setDataToStorage = () => ({\n  type: SET_DATA_TO_STORAGE,\n})\n","import { call, put, takeEvery, select } from 'redux-saga/effects'\nimport getHistory from 'react-router-global-history'\n\nimport {\n  setLocationData,\n  fetchDataSuccess,\n  fetchDataError,\n  setWeatherDataSuccess,\n  setWeatherDataError,\n} from '@/actions/location'\nimport { setDataToStorage } from '@/actions/storage'\nimport { fetchServiceData } from '.'\nimport { mapServiceData } from '@/utils/services'\nimport { LOCATIONIQ, SET_WEATHER_DATA, WEATHER_PAGE_PATH } from '@/constants'\n\nconst fetchCoordsFromCityNameApi = city => {\n  return fetchServiceData(LOCATIONIQ, city)\n}\n\nfunction * fetchCoordsFromCityNameSaga (action) {\n  try {\n    const response = yield call(fetchCoordsFromCityNameApi, action)\n    yield put(fetchDataSuccess(response))\n  } catch (error) {\n    yield put(fetchDataError())\n  }\n}\n\nfunction * setWeatherDataSaga (action) {\n  let latitude\n  let longitude\n\n  if (action.payload) {\n    const cityName = action.payload\n    yield * fetchCoordsFromCityNameSaga(cityName)\n    latitude = yield select(state => state.location.data[0].lat)\n    longitude = yield select(state => state.location.data[0].lon)\n    yield put(setLocationData({ latitude, longitude, cityName }))\n  } else {\n    latitude = yield select(state => state.location.coords.latitude)\n    longitude = yield select(state => state.location.coords.longitude)\n  }\n\n  const service = yield select(state => state.services.current)\n\n  try {\n    const data = yield call(fetchServiceData, service, latitude, longitude)\n    yield put(setWeatherDataSuccess(mapServiceData(service, data)))\n  } catch (error) {\n    yield put(setWeatherDataError())\n  }\n\n  yield put(setDataToStorage())\n\n  getHistory().push(WEATHER_PAGE_PATH)\n}\n\nfunction * watchSetWeatherData () {\n  yield takeEvery(SET_WEATHER_DATA, setWeatherDataSaga)\n}\n\nexport default watchSetWeatherData\n","import { takeEvery, select, put } from 'redux-saga/effects'\nimport localforage from 'localforage'\nimport getHistory from 'react-router-global-history'\n\nimport { SET_DATA_TO_STORAGE, SHOW_STORAGED_RESULT, WEATHER_PAGE_PATH } from '@/constants'\nimport { setDataFromStorage } from '@/actions'\n\nfunction * setDataToStorageSaga () {\n  const { cityName, temperature, weather, weatherImageSrc } = yield select(state => state.location)\n  const clientDate = Date.now()\n  const clientData = {\n    clientDate,\n    cityName,\n    temperature,\n    weather,\n    weatherImageSrc,\n  }\n\n  localforage.setItem('weatherAppData', clientData)\n}\n\nfunction * showStoragedResultSaga (action) {\n  yield put(setDataFromStorage(action.payload))\n\n  getHistory().push(WEATHER_PAGE_PATH)\n}\n\nfunction * watchSetDataToStorage () {\n  yield takeEvery(SET_DATA_TO_STORAGE, setDataToStorageSaga)\n}\n\nfunction * watchShowStoragedResult () {\n  yield takeEvery(SHOW_STORAGED_RESULT, showStoragedResultSaga)\n}\n\nexport { watchSetDataToStorage, watchShowStoragedResult }\n","import { all } from 'redux-saga/effects'\n\nimport { getServiceUrl } from '@/utils/services'\nimport watchChangeCityInput from './input'\nimport watchSetLocationParams from './location'\nimport watchSetWeatherData from './weather'\nimport { watchSetDataToStorage, watchShowStoragedResult } from './storage'\n\nexport const fetchServiceData = async (service, ...args) => {\n  const url = getServiceUrl(service, ...args)\n\n  if (!url) {\n    throw new Error('Service is not defined')\n  }\n\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => resolve(data))\n      .catch(error => reject(error))\n  })\n}\n\nexport default function * () {\n  yield all([\n    watchSetLocationParams(),\n    watchChangeCityInput(),\n    watchSetWeatherData(),\n    watchSetDataToStorage(),\n    watchShowStoragedResult(),\n  ])\n}\n","import { CHANGE_SERVICE } from '@/constants/actions'\nimport allServices from '@/services.json'\nimport { OPEN_WEATHER } from '@/constants'\n\nconst initialState = {\n  current: OPEN_WEATHER,\n}\n\nconst services = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_SERVICE:\n      if (allServices.filter(service => service.id === action.payload.id).length > 0) {\n        return {\n          ...state,\n          current: action.payload.id,\n        }\n      }\n\n      return state\n\n    default:\n      return state\n  }\n}\n\nexport default services\n","import {\n  SET_LOCATION_DATA,\n  SET_CITY_INPUT_VALUE,\n  SET_WEATHER_DATA_SUCCESS,\n  SET_WEATHER_DATA_ERROR,\n  FETCH_COORDS_SUCCESS,\n  FETCH_COORDS_ERROR,\n  FETCH_DATA_SUCCESS,\n  FETCH_DATA_ERROR,\n  SET_DATA_FROM_STORAGE,\n} from '@/constants/actions'\n\nconst initialState = {\n  cityName: '',\n  cityInputValue: '',\n  coords: {\n    latitude: null,\n    longitude: null,\n  },\n  temperature: null,\n  weather: '',\n  weatherImageSrc: '',\n  data: null,\n  isErrorInLoad: false,\n}\n\nconst location = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOCATION_DATA:\n      return {\n        ...state,\n        cityName: action.payload.cityName,\n        coords: {\n          ...state.coords,\n          longitude: action.payload.longitude,\n          latitude: action.payload.latitude,\n        },\n      }\n\n    case SET_WEATHER_DATA_SUCCESS:\n      return {\n        ...state,\n        temperature: action.payload.temperature,\n        weather: action.payload.weather,\n        weatherImageSrc: action.payload.weatherImageSrc,\n      }\n\n    case SET_WEATHER_DATA_ERROR:\n      return {\n        ...state,\n        isErrorInLoad: true,\n      }\n\n    case SET_CITY_INPUT_VALUE:\n      return {\n        ...state,\n        cityInputValue: action.payload,\n      }\n\n    case FETCH_COORDS_SUCCESS:\n      return {\n        ...state,\n        coords: {\n          ...state.coords,\n          latitude: action.payload.latitude,\n          longitude: action.payload.longitude,\n        },\n      }\n\n    case FETCH_COORDS_ERROR:\n      return {\n        ...state,\n        isErrorInLoad: true,\n      }\n\n    case FETCH_DATA_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n      }\n\n    case FETCH_DATA_ERROR:\n      return {\n        ...state,\n        isErrorInLoad: true,\n      }\n\n    case SET_DATA_FROM_STORAGE:\n      return {\n        ...state,\n        cityName: action.payload.cityName,\n        temperature: action.payload.temperature,\n        weather: action.payload.weather,\n        weatherImageSrc: action.payload.weatherImageSrc,\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default location\n","import { combineReducers } from 'redux'\nimport services from '@/reducer/services'\nimport location from '@/reducer/location'\n\nexport default combineReducers({\n  services,\n  location,\n})\n","import { applyMiddleware, createStore, compose } from 'redux'\nimport reduxLogger from 'redux-logger'\nimport createSagaMiddleware from 'redux-saga'\n\nimport rootSaga from '@/sagas'\nimport reducer from '@/reducer'\n\nlet store = null\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst createDevelopmentStore = () => {\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n  return createStore(reducer, composeEnhancers(applyMiddleware(sagaMiddleware, reduxLogger)))\n}\n\nconst createProductionStore = () => {\n  return createStore(reducer, applyMiddleware(sagaMiddleware))\n}\n\nexport const getStore = () => {\n  if (!store) {\n    store =\n      process.env.NODE_ENV === 'development' ? createDevelopmentStore() : createProductionStore()\n\n    sagaMiddleware.run(rootSaga)\n  }\n\n  return store\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Lato:300,400,700&display=swap');\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  html {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    background-color: ${props => props.theme.colors.background};\n    color: ${props => props.theme.colors.font};\n    font-weight: ${props => props.theme.fontWeights.normal};\n    font-family: ${props => props.theme.fontFamily}\n  }\n\n  main {\n    padding-left: ${props => props.theme.unit.double};\n    padding-right: ${props => props.theme.unit.double};\n    padding-top: ${props => props.theme.unit.quadriple};\n    padding-bottom: ${props => props.theme.unit.quadriple};\n\n    @media (min-width: ${props => props.theme.width.tablet}) {\n      padding-left: ${props => props.theme.unit.eight};\n      padding-right: ${props => props.theme.unit.eight};\n      padding-top: ${props => props.theme.unit.eight};\n      padding-bottom: ${props => props.theme.unit.eight};\n    }\n  }\n`\n","export default {\n  unit: {\n    half: '4px',\n    single: '8px',\n    double: '16px',\n    quadriple: '32px',\n    eight: '64px',\n  },\n  colors: {\n    background: '#ffffff',\n    backgroundDark: '#000',\n    primary: '#1890ff',\n    primaryLight: '#40a9ff',\n    secondary: '#d9e7fb',\n    secondaryLight: '#e3edfb',\n    font: 'rgba(0,0,0,0.65)',\n    fontPrimary: '#ffffff',\n    fontSecondary: '#6b8cbc',\n  },\n  fontSizes: {\n    werySmall: '12px',\n    small: '14px',\n    normal: '16px',\n    big: '20px',\n    veryBig: '24px',\n  },\n  letterSpacing: {\n    normal: 'normal',\n    caps: '0.25em',\n  },\n  fontWeights: {\n    light: 300,\n    normal: 400,\n    bold: 700,\n  },\n  fontFamily: ['Lato, \"Helvetica Neue\", Arial'],\n  width: {\n    mobile: '320px',\n    tablet: '768px',\n    desktop: '992px',\n    desktopLarge: '1200px',\n    mobileOnly: '767px',\n  },\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ThemeProvider } from 'styled-components'\n\nimport GlobalStyle from '@/theme/GlobalStyle'\nimport theme from '@/theme'\n\nconst ThemeProviderWrapper = ({ children }) => (\n  <ThemeProvider theme={theme}>\n    <>\n      <GlobalStyle />\n      {children}\n    </>\n  </ThemeProvider>\n)\n\nThemeProviderWrapper.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.string.isRequired,\n    PropTypes.element.isRequired,\n  ]),\n}\n\nexport default ThemeProviderWrapper\n","import React from 'react'\nimport { Provider } from 'react-redux'\n\nimport Router from '@/Router'\nimport { getStore } from '@/store'\nimport ThemeProviderWrapper from '@/components/wrappers/ThemeProvider'\n\nconst App = () => {\n  return (\n    <Provider store={getStore()}>\n      <ThemeProviderWrapper>\n        <Router />\n      </ThemeProviderWrapper>\n    </Provider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'antd/dist/antd.css'\n\nimport * as serviceWorker from './serviceWorker'\nimport App from '@/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n/**\n * Swith serviceWorker.register() to enable service worker\n */\nserviceWorker.unregister()\n","// Action types constants\n\nexport const CHANGE_SERVICE = 'CHANGE_SERVICE'\nexport const SET_LOCATION_DATA = 'SET_LOCATION_DATA'\nexport const SET_WEATHER_DATA = 'SET_WEATHER_DATA'\nexport const SET_WEATHER_DATA_SUCCESS = 'SET_WEATHER_DATA_SUCCESS'\nexport const SET_WEATHER_DATA_ERROR = 'SET_WEATHER_DATA_ERROR'\nexport const CHANGE_CITY_INPUT = 'CHANGE_CITY_INPUT'\nexport const SET_CITY_INPUT_VALUE = 'SET_CITY_INPUT_VALUE'\nexport const SET_LOCATION_PARAMS = 'SET_LOCATION_PARAMS'\nexport const FETCH_DATA_FROM_COORDS = 'FETCH_DATA_FROM_COORDS'\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS'\nexport const FETCH_DATA_ERROR = 'FETCH_DATA_ERROR'\nexport const FETCH_COORDS_SUCCESS = 'FETCH_COORDS_SUCCESS'\nexport const FETCH_COORDS_ERROR = 'FETCH_COORDS_ERROR'\nexport const SET_DATA_TO_STORAGE = 'SET_DATA_TO_STORAGE'\nexport const SET_DATA_FROM_STORAGE = 'SET_DATA_FROM_STORAGE'\nexport const SHOW_STORAGED_RESULT = 'SHOW_STORAGED_RESULT'\n","export * from './actions'\nexport * from './paths'\nexport * from './endpoints'\nexport * from './forms'\nexport * from './services'\n","import {\n  SET_LOCATION_DATA,\n  SET_WEATHER_DATA,\n  SET_WEATHER_DATA_SUCCESS,\n  SET_WEATHER_DATA_ERROR,\n  CHANGE_CITY_INPUT,\n  SET_CITY_INPUT_VALUE,\n  SET_LOCATION_PARAMS,\n  FETCH_COORDS_SUCCESS,\n  FETCH_COORDS_ERROR,\n  FETCH_DATA_FROM_COORDS,\n  FETCH_DATA_SUCCESS,\n  FETCH_DATA_ERROR,\n  SET_DATA_FROM_STORAGE,\n  SHOW_STORAGED_RESULT,\n} from '@/constants/actions'\n\nexport const setLocationData = payload => ({\n  payload,\n  type: SET_LOCATION_DATA,\n})\n\nexport const setWeatherData = payload => ({\n  payload,\n  type: SET_WEATHER_DATA,\n})\n\nexport const setWeatherDataSuccess = payload => ({\n  payload,\n  type: SET_WEATHER_DATA_SUCCESS,\n})\n\nexport const setWeatherDataError = () => ({\n  type: SET_WEATHER_DATA_ERROR,\n})\n\nexport const changeCityInput = payload => ({\n  payload,\n  type: CHANGE_CITY_INPUT,\n})\n\nexport const setCityInputValue = payload => ({\n  payload,\n  type: SET_CITY_INPUT_VALUE,\n})\n\nexport const setLocationParams = () => ({\n  type: SET_LOCATION_PARAMS,\n})\n\nexport const fetchCoordsSuccess = payload => ({\n  payload,\n  type: FETCH_COORDS_SUCCESS,\n})\n\nexport const fetchCoordsError = () => ({\n  type: FETCH_COORDS_ERROR,\n})\n\nexport const fetchDataFromCoords = payload => ({\n  payload,\n  type: FETCH_DATA_FROM_COORDS,\n})\n\nexport const fetchDataSuccess = payload => ({\n  payload,\n  type: FETCH_DATA_SUCCESS,\n})\n\nexport const fetchDataError = () => ({\n  type: FETCH_DATA_ERROR,\n})\n\nexport const setDataFromStorage = payload => ({\n  payload,\n  type: SET_DATA_FROM_STORAGE,\n})\n\nexport const showStoragedResult = payload => ({\n  payload,\n  type: SHOW_STORAGED_RESULT,\n})\n"],"sourceRoot":""}